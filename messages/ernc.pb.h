/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_ERNC_PB_H_INCLUDED
#define PB_ERNC_PB_H_INCLUDED
#include <pb.h>
#include "basic.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* --------------------- 定义交互参数 -------------------------- */
typedef enum _ProtoID {
    ProtoID_MSG_ANC_OFF = 0,
    ProtoID_MSG_ENC_OFF = 1,
    ProtoID_MSG_RNC_OFF = 2,
    ProtoID_MSG_CHECK_MODE = 3,
    ProtoID_MSG_CALIBRATION_AMP = 4
} ProtoID;

/* Struct definitions */
typedef struct _MSG_AncOff {
    bool value;
} MSG_AncOff;

typedef struct _MSG_EncOff {
    bool value;
} MSG_EncOff;

typedef struct _MSG_RncOff {
    bool value;
} MSG_RncOff;

typedef struct _MSG_CheckMod {
    bool value;
} MSG_CheckMod;

typedef struct _MSG_ANCControl {
    bool has_anc_off;
    MSG_AncOff anc_off;
} MSG_ANCControl;

typedef struct _MSG_RncRefresh {
    bool value;
} MSG_RncRefresh;

typedef struct _MSG_SpeakerCheck {
    bool value;
} MSG_SpeakerCheck;

typedef struct _MSG_TranFuncFlag {
    bool value;
} MSG_TranFuncFlag;

typedef struct _MSG_BypassMode {
    bool value;
} MSG_BypassMode;

typedef struct _MSG_Alpha {
    uint32_t alpha1;
    uint32_t alpha2;
    uint32_t alpha3;
    uint32_t alpha4;
    uint32_t alpha5;
    uint32_t alpha1_10;
    uint32_t alpha2_10;
    uint32_t alpha3_10;
    uint32_t alpha4_10;
    uint32_t alpha5_10;
} MSG_Alpha;

typedef struct _MSG_Set1 {
    uint32_t gamma;
    uint32_t eta;
    uint32_t delta;
    uint32_t refer_num;
    uint32_t spk_num;
    uint32_t output_amplitude;
} MSG_Set1;

typedef struct _MSG_CalibrationAmp {
    uint32_t tach_of_amp1[10];
    uint32_t tach_of_amp2[10];
    uint32_t tach_of_amp3[10];
    uint32_t tach_of_amp4[10];
    uint32_t amp1[10];
    uint32_t amp2[10];
    uint32_t amp3[10];
    uint32_t amp4[10];
    uint32_t amp5[10];
} MSG_CalibrationAmp;

typedef struct _MSG_CalibrationOther {
    uint32_t tach_of_step1;
    uint32_t tach_of_step2;
    uint32_t tach_of_step3;
    uint32_t tach_of_step4;
    uint32_t tach_of_step5;
    uint32_t step1;
    uint32_t step2;
    uint32_t step3;
    uint32_t step4;
    uint32_t step5;
    uint32_t tach_of_leaky1;
    uint32_t tach_of_leaky2;
    uint32_t tach_of_leaky3;
    uint32_t tach_of_leaky4;
    uint32_t tach_of_leaky5;
    uint32_t leaky1;
    uint32_t leaky2;
    uint32_t leaky3;
    uint32_t leaky4;
    uint32_t leaky5;
    uint32_t err_wei1;
    uint32_t err_wei2;
    uint32_t err_wei3;
    uint32_t err_wei4;
    uint32_t err_wei5;
    uint32_t delta1;
    uint32_t delta2;
    uint32_t delta3;
    uint32_t delta4;
    uint32_t delta5;
} MSG_CalibrationOther;

typedef struct _MsgRequestResponse {
    ProtoID protoID;
    FunCode funCode;
    pb_size_t which_payload;
    union _MsgRequestResponse_payload {
        MSG_AncOff msg_anc_off;
        MSG_EncOff msg_enc_off;
        MSG_RncOff msg_rnc_off;
        MSG_CheckMod msg_check_mod;
        MSG_CalibrationAmp msg_calibration_amp;
    } payload;
} MsgRequestResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ProtoID_MIN ProtoID_MSG_ANC_OFF
#define _ProtoID_MAX ProtoID_MSG_CALIBRATION_AMP
#define _ProtoID_ARRAYSIZE ((ProtoID)(ProtoID_MSG_CALIBRATION_AMP+1))














#define MsgRequestResponse_protoID_ENUMTYPE ProtoID
#define MsgRequestResponse_funCode_ENUMTYPE FunCode


/* Initializer values for message structs */
#define MSG_AncOff_init_default                  {0}
#define MSG_EncOff_init_default                  {0}
#define MSG_RncOff_init_default                  {0}
#define MSG_CheckMod_init_default                {0}
#define MSG_ANCControl_init_default              {false, MSG_AncOff_init_default}
#define MSG_RncRefresh_init_default              {0}
#define MSG_SpeakerCheck_init_default            {0}
#define MSG_TranFuncFlag_init_default            {0}
#define MSG_BypassMode_init_default              {0}
#define MSG_Alpha_init_default                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MSG_Set1_init_default                    {0, 0, 0, 0, 0, 0}
#define MSG_CalibrationAmp_init_default          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define MSG_CalibrationOther_init_default        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MsgRequestResponse_init_default          {_ProtoID_MIN, _FunCode_MIN, 0, {MSG_AncOff_init_default}}
#define MSG_AncOff_init_zero                     {0}
#define MSG_EncOff_init_zero                     {0}
#define MSG_RncOff_init_zero                     {0}
#define MSG_CheckMod_init_zero                   {0}
#define MSG_ANCControl_init_zero                 {false, MSG_AncOff_init_zero}
#define MSG_RncRefresh_init_zero                 {0}
#define MSG_SpeakerCheck_init_zero               {0}
#define MSG_TranFuncFlag_init_zero               {0}
#define MSG_BypassMode_init_zero                 {0}
#define MSG_Alpha_init_zero                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MSG_Set1_init_zero                       {0, 0, 0, 0, 0, 0}
#define MSG_CalibrationAmp_init_zero             {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define MSG_CalibrationOther_init_zero           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define MsgRequestResponse_init_zero             {_ProtoID_MIN, _FunCode_MIN, 0, {MSG_AncOff_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define MSG_AncOff_value_tag                     1
#define MSG_EncOff_value_tag                     1
#define MSG_RncOff_value_tag                     1
#define MSG_CheckMod_value_tag                   1
#define MSG_ANCControl_anc_off_tag               1
#define MSG_RncRefresh_value_tag                 1
#define MSG_SpeakerCheck_value_tag               1
#define MSG_TranFuncFlag_value_tag               1
#define MSG_BypassMode_value_tag                 1
#define MSG_Alpha_alpha1_tag                     1
#define MSG_Alpha_alpha2_tag                     2
#define MSG_Alpha_alpha3_tag                     3
#define MSG_Alpha_alpha4_tag                     4
#define MSG_Alpha_alpha5_tag                     5
#define MSG_Alpha_alpha1_10_tag                  6
#define MSG_Alpha_alpha2_10_tag                  7
#define MSG_Alpha_alpha3_10_tag                  8
#define MSG_Alpha_alpha4_10_tag                  9
#define MSG_Alpha_alpha5_10_tag                  10
#define MSG_Set1_gamma_tag                       1
#define MSG_Set1_eta_tag                         2
#define MSG_Set1_delta_tag                       3
#define MSG_Set1_refer_num_tag                   4
#define MSG_Set1_spk_num_tag                     5
#define MSG_Set1_output_amplitude_tag            6
#define MSG_CalibrationAmp_tach_of_amp1_tag      1
#define MSG_CalibrationAmp_tach_of_amp2_tag      2
#define MSG_CalibrationAmp_tach_of_amp3_tag      3
#define MSG_CalibrationAmp_tach_of_amp4_tag      4
#define MSG_CalibrationAmp_amp1_tag              5
#define MSG_CalibrationAmp_amp2_tag              6
#define MSG_CalibrationAmp_amp3_tag              7
#define MSG_CalibrationAmp_amp4_tag              8
#define MSG_CalibrationAmp_amp5_tag              9
#define MSG_CalibrationOther_tach_of_step1_tag   1
#define MSG_CalibrationOther_tach_of_step2_tag   2
#define MSG_CalibrationOther_tach_of_step3_tag   3
#define MSG_CalibrationOther_tach_of_step4_tag   4
#define MSG_CalibrationOther_tach_of_step5_tag   5
#define MSG_CalibrationOther_step1_tag           6
#define MSG_CalibrationOther_step2_tag           7
#define MSG_CalibrationOther_step3_tag           8
#define MSG_CalibrationOther_step4_tag           9
#define MSG_CalibrationOther_step5_tag           10
#define MSG_CalibrationOther_tach_of_leaky1_tag  11
#define MSG_CalibrationOther_tach_of_leaky2_tag  12
#define MSG_CalibrationOther_tach_of_leaky3_tag  13
#define MSG_CalibrationOther_tach_of_leaky4_tag  14
#define MSG_CalibrationOther_tach_of_leaky5_tag  15
#define MSG_CalibrationOther_leaky1_tag          16
#define MSG_CalibrationOther_leaky2_tag          17
#define MSG_CalibrationOther_leaky3_tag          18
#define MSG_CalibrationOther_leaky4_tag          19
#define MSG_CalibrationOther_leaky5_tag          20
#define MSG_CalibrationOther_err_wei1_tag        21
#define MSG_CalibrationOther_err_wei2_tag        22
#define MSG_CalibrationOther_err_wei3_tag        23
#define MSG_CalibrationOther_err_wei4_tag        24
#define MSG_CalibrationOther_err_wei5_tag        25
#define MSG_CalibrationOther_delta1_tag          26
#define MSG_CalibrationOther_delta2_tag          27
#define MSG_CalibrationOther_delta3_tag          28
#define MSG_CalibrationOther_delta4_tag          29
#define MSG_CalibrationOther_delta5_tag          30
#define MsgRequestResponse_protoID_tag           1
#define MsgRequestResponse_funCode_tag           2
#define MsgRequestResponse_msg_anc_off_tag       3
#define MsgRequestResponse_msg_enc_off_tag       4
#define MsgRequestResponse_msg_rnc_off_tag       5
#define MsgRequestResponse_msg_check_mod_tag     6
#define MsgRequestResponse_msg_calibration_amp_tag 7

/* Struct field encoding specification for nanopb */
#define MSG_AncOff_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_AncOff_CALLBACK NULL
#define MSG_AncOff_DEFAULT NULL

#define MSG_EncOff_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_EncOff_CALLBACK NULL
#define MSG_EncOff_DEFAULT NULL

#define MSG_RncOff_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_RncOff_CALLBACK NULL
#define MSG_RncOff_DEFAULT NULL

#define MSG_CheckMod_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_CheckMod_CALLBACK NULL
#define MSG_CheckMod_DEFAULT NULL

#define MSG_ANCControl_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  anc_off,           1)
#define MSG_ANCControl_CALLBACK NULL
#define MSG_ANCControl_DEFAULT NULL
#define MSG_ANCControl_anc_off_MSGTYPE MSG_AncOff

#define MSG_RncRefresh_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_RncRefresh_CALLBACK NULL
#define MSG_RncRefresh_DEFAULT NULL

#define MSG_SpeakerCheck_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_SpeakerCheck_CALLBACK NULL
#define MSG_SpeakerCheck_DEFAULT NULL

#define MSG_TranFuncFlag_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_TranFuncFlag_CALLBACK NULL
#define MSG_TranFuncFlag_DEFAULT NULL

#define MSG_BypassMode_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     value,             1)
#define MSG_BypassMode_CALLBACK NULL
#define MSG_BypassMode_DEFAULT NULL

#define MSG_Alpha_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   alpha1,            1) \
X(a, STATIC,   SINGULAR, UINT32,   alpha2,            2) \
X(a, STATIC,   SINGULAR, UINT32,   alpha3,            3) \
X(a, STATIC,   SINGULAR, UINT32,   alpha4,            4) \
X(a, STATIC,   SINGULAR, UINT32,   alpha5,            5) \
X(a, STATIC,   SINGULAR, UINT32,   alpha1_10,         6) \
X(a, STATIC,   SINGULAR, UINT32,   alpha2_10,         7) \
X(a, STATIC,   SINGULAR, UINT32,   alpha3_10,         8) \
X(a, STATIC,   SINGULAR, UINT32,   alpha4_10,         9) \
X(a, STATIC,   SINGULAR, UINT32,   alpha5_10,        10)
#define MSG_Alpha_CALLBACK NULL
#define MSG_Alpha_DEFAULT NULL

#define MSG_Set1_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   gamma,             1) \
X(a, STATIC,   SINGULAR, UINT32,   eta,               2) \
X(a, STATIC,   SINGULAR, UINT32,   delta,             3) \
X(a, STATIC,   SINGULAR, UINT32,   refer_num,         4) \
X(a, STATIC,   SINGULAR, UINT32,   spk_num,           5) \
X(a, STATIC,   SINGULAR, UINT32,   output_amplitude,   6)
#define MSG_Set1_CALLBACK NULL
#define MSG_Set1_DEFAULT NULL

#define MSG_CalibrationAmp_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, UINT32,   tach_of_amp1,      1) \
X(a, STATIC,   FIXARRAY, UINT32,   tach_of_amp2,      2) \
X(a, STATIC,   FIXARRAY, UINT32,   tach_of_amp3,      3) \
X(a, STATIC,   FIXARRAY, UINT32,   tach_of_amp4,      4) \
X(a, STATIC,   FIXARRAY, UINT32,   amp1,              5) \
X(a, STATIC,   FIXARRAY, UINT32,   amp2,              6) \
X(a, STATIC,   FIXARRAY, UINT32,   amp3,              7) \
X(a, STATIC,   FIXARRAY, UINT32,   amp4,              8) \
X(a, STATIC,   FIXARRAY, UINT32,   amp5,              9)
#define MSG_CalibrationAmp_CALLBACK NULL
#define MSG_CalibrationAmp_DEFAULT NULL

#define MSG_CalibrationOther_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_step1,     1) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_step2,     2) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_step3,     3) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_step4,     4) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_step5,     5) \
X(a, STATIC,   SINGULAR, UINT32,   step1,             6) \
X(a, STATIC,   SINGULAR, UINT32,   step2,             7) \
X(a, STATIC,   SINGULAR, UINT32,   step3,             8) \
X(a, STATIC,   SINGULAR, UINT32,   step4,             9) \
X(a, STATIC,   SINGULAR, UINT32,   step5,            10) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_leaky1,   11) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_leaky2,   12) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_leaky3,   13) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_leaky4,   14) \
X(a, STATIC,   SINGULAR, UINT32,   tach_of_leaky5,   15) \
X(a, STATIC,   SINGULAR, UINT32,   leaky1,           16) \
X(a, STATIC,   SINGULAR, UINT32,   leaky2,           17) \
X(a, STATIC,   SINGULAR, UINT32,   leaky3,           18) \
X(a, STATIC,   SINGULAR, UINT32,   leaky4,           19) \
X(a, STATIC,   SINGULAR, UINT32,   leaky5,           20) \
X(a, STATIC,   SINGULAR, UINT32,   err_wei1,         21) \
X(a, STATIC,   SINGULAR, UINT32,   err_wei2,         22) \
X(a, STATIC,   SINGULAR, UINT32,   err_wei3,         23) \
X(a, STATIC,   SINGULAR, UINT32,   err_wei4,         24) \
X(a, STATIC,   SINGULAR, UINT32,   err_wei5,         25) \
X(a, STATIC,   SINGULAR, UINT32,   delta1,           26) \
X(a, STATIC,   SINGULAR, UINT32,   delta2,           27) \
X(a, STATIC,   SINGULAR, UINT32,   delta3,           28) \
X(a, STATIC,   SINGULAR, UINT32,   delta4,           29) \
X(a, STATIC,   SINGULAR, UINT32,   delta5,           30)
#define MSG_CalibrationOther_CALLBACK NULL
#define MSG_CalibrationOther_DEFAULT NULL

#define MsgRequestResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    protoID,           1) \
X(a, STATIC,   SINGULAR, UENUM,    funCode,           2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,msg_anc_off,payload.msg_anc_off),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,msg_enc_off,payload.msg_enc_off),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,msg_rnc_off,payload.msg_rnc_off),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,msg_check_mod,payload.msg_check_mod),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,msg_calibration_amp,payload.msg_calibration_amp),   7)
#define MsgRequestResponse_CALLBACK NULL
#define MsgRequestResponse_DEFAULT NULL
#define MsgRequestResponse_payload_msg_anc_off_MSGTYPE MSG_AncOff
#define MsgRequestResponse_payload_msg_enc_off_MSGTYPE MSG_EncOff
#define MsgRequestResponse_payload_msg_rnc_off_MSGTYPE MSG_RncOff
#define MsgRequestResponse_payload_msg_check_mod_MSGTYPE MSG_CheckMod
#define MsgRequestResponse_payload_msg_calibration_amp_MSGTYPE MSG_CalibrationAmp

extern const pb_msgdesc_t MSG_AncOff_msg;
extern const pb_msgdesc_t MSG_EncOff_msg;
extern const pb_msgdesc_t MSG_RncOff_msg;
extern const pb_msgdesc_t MSG_CheckMod_msg;
extern const pb_msgdesc_t MSG_ANCControl_msg;
extern const pb_msgdesc_t MSG_RncRefresh_msg;
extern const pb_msgdesc_t MSG_SpeakerCheck_msg;
extern const pb_msgdesc_t MSG_TranFuncFlag_msg;
extern const pb_msgdesc_t MSG_BypassMode_msg;
extern const pb_msgdesc_t MSG_Alpha_msg;
extern const pb_msgdesc_t MSG_Set1_msg;
extern const pb_msgdesc_t MSG_CalibrationAmp_msg;
extern const pb_msgdesc_t MSG_CalibrationOther_msg;
extern const pb_msgdesc_t MsgRequestResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MSG_AncOff_fields &MSG_AncOff_msg
#define MSG_EncOff_fields &MSG_EncOff_msg
#define MSG_RncOff_fields &MSG_RncOff_msg
#define MSG_CheckMod_fields &MSG_CheckMod_msg
#define MSG_ANCControl_fields &MSG_ANCControl_msg
#define MSG_RncRefresh_fields &MSG_RncRefresh_msg
#define MSG_SpeakerCheck_fields &MSG_SpeakerCheck_msg
#define MSG_TranFuncFlag_fields &MSG_TranFuncFlag_msg
#define MSG_BypassMode_fields &MSG_BypassMode_msg
#define MSG_Alpha_fields &MSG_Alpha_msg
#define MSG_Set1_fields &MSG_Set1_msg
#define MSG_CalibrationAmp_fields &MSG_CalibrationAmp_msg
#define MSG_CalibrationOther_fields &MSG_CalibrationOther_msg
#define MsgRequestResponse_fields &MsgRequestResponse_msg

/* Maximum encoded size of messages (where known) */
#define ERNC_PB_H_MAX_SIZE                       MsgRequestResponse_size
#define MSG_ANCControl_size                      4
#define MSG_Alpha_size                           60
#define MSG_AncOff_size                          2
#define MSG_BypassMode_size                      2
#define MSG_CalibrationAmp_size                  540
#define MSG_CalibrationOther_size                195
#define MSG_CheckMod_size                        2
#define MSG_EncOff_size                          2
#define MSG_RncOff_size                          2
#define MSG_RncRefresh_size                      2
#define MSG_Set1_size                            36
#define MSG_SpeakerCheck_size                    2
#define MSG_TranFuncFlag_size                    2
#define MsgRequestResponse_size                  547

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
